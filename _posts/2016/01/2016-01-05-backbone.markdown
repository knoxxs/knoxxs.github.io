---
layout: post
title:  Backbone
date:   2016-01-05 10:42:00
categories: programming backbone ui
tags: backbone tutorial resource model collection view router
---

## Introduction
When working on a web application that involves a lot of JavaScript, one of the first things you learn is to stop tying your data to the DOM. It's all too easy to create JavaScript applications that end up as tangled piles of jQuery selectors and callbacks, all trying frantically to keep data in sync between the HTML UI, your JavaScript logic, and the database on your server. For rich client-side applications, a more structured approach is often helpful.

With Backbone, you represent your data as Models, which can be created, validated, destroyed, and saved to the server. Whenever a UI action causes an attribute of a model to change, the model triggers a "change" event; all the Views that display the model's state can be notified of the change, so that they are able to respond accordingly, re-rendering themselves with the new information. In a finished Backbone app, you don't have to write the glue code that looks into the DOM to find an element with a specific id, and update the HTML manually — when the model changes, the views simply update themselves. The single most important thing that Backbone can help you with is keeping your business logic separate from your user interface.

### Model

- Orchestrates data and business logic.
- Loads and saves from the server.
- Emits events when data changes.

A Model manages an internal table of data attributes, and triggers "change" events when any of its data is modified. Models handle syncing data with a persistence layer — usually a REST API with a backing database. Design your models as the atomic reusable objects containing all of the helpful functions for manipulating their particular bit of data. Models should be able to be passed around throughout your app, and used anywhere that bit of data is needed.

### View

- Listens for changes and renders UI.
- Handles user input and interactivity.
- Sends captured input to the model.

A View is an atomic chunk of user interface. It often renders the data from a specific model, or number of models — but views can also be data-less chunks of UI that stand alone. Models should be generally unaware of views. Instead, views listen to the model "change" events, and react or re-render themselves appropriately.

### Collection
A Collection helps you deal with a group of related models, handling the loading and saving of new models to the server and providing helper functions for performing aggregations or computations against a list of models. Aside from their own events, collections also proxy through all of the events that occur to models within them, allowing you to listen in one place for any change that might happen to any model in the collection.

### API Integration
Backbone is pre-configured to sync with a RESTful API. Simply create a new `Collection` with the url of your resource endpoint:

```javascript
var Books = Backbone.Collection.extend({
  url: '/books'
});
```

The `Collection` and `Model` components together form a direct mapping of REST resources using the following methods:

```javascript
GET  /books/ .... collection.fetch();
POST /books/ .... collection.create();
GET  /books/1 ... model.fetch();
PUT  /books/1 ... model.save();
DEL  /books/1 ... model.destroy();
```

When fetching raw JSON data from an API, a `Collection` will automatically populate itself with data formatted as an array, while a Model will automatically populate itself with data formatted as an object:

```javascript
[{"id": 1}] ..... populates a Collection with one model.
{"id": 1} ....... populates a Model with one attribute.
```javascript

However, it's fairly common to encounter APIs that return data in a different format than what Backbone expects. For example, consider fetching a Collection from an API that returns the real data array wrapped in metadata:

```javascript
{
  "page": 1,
  "limit": 10,
  "total": 2,
  "books": [
    {"id": 1, "title": "Pride and Prejudice"},
    {"id": 4, "title": "The Great Gatsby"}
  ]
}
```javascript
In the above example data, a Collection should populate using the "books" array rather than the root object structure. This difference is easily reconciled using a parse method that returns (or transforms) the desired portion of API data:

```javascript
var Books = Backbone.Collection.extend({
  url: '/books',
  parse: function(data) {
    return data.books;
  }
});
```

### View Rendering
Each `View` manages the rendering and user interaction within its own DOM element. If you're strict about not allowing views to reach outside of themselves, it helps keep your interface flexible — allowing views to be rendered in isolation in any place where they might be needed.

Backbone remains unopinionated about the process used to render `View` objects and their subviews into UI: you define how your models get translated into HTML (or SVG, or Canvas, or something even more exotic). It could be as prosaic as a simple [Underscore template](http://underscorejs.org/#template), or as fancy as the [React virtual DOM](http://facebook.github.io/react/docs/tutorial.html). Some basic approaches to rendering views can be found in the [Backbone primer](https://github.com/jashkenas/backbone/wiki/Backbone%2C-The-Primer).

### Routing with URLs
In rich web applications, we still want to provide linkable, bookmarkable, and shareable URLs to meaningful locations within an app. Use the Router to update the browser URL whenever the user reaches a new "place" in your app that they might want to bookmark or share. Conversely, the Router detects changes to the URL — say, pressing the "Back" button — and can tell your application exactly where you are now.

## References:

1. [Learn Backbone.js](https://www.udacity.com/course/ud990)
2. [Backbonejs - Getting Started](http://backbonejs.org/#Getting-started)
3. [Backbone primer](https://github.com/jashkenas/backbone/wiki/Backbone%2C-The-Primer)
4. [Underscore template](http://underscorejs.org/#template)
5. [React virtual DOM](http://facebook.github.io/react/docs/tutorial.html)